{
  "hash": "1e5d7e8ad82932d1ea8464523fa5a071",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Idiomatic Ephemeris Sourcing and Parsing in Julia\n\ntags: \n  - astrodynamics\n  - astronomy\n  - astrophysics\n  - ephemeris\n  - Julia\n  - SPICE\n  - Horizons\n\n\nauthor:\n  - name:\n      given: Joseph\n      family: Carpinelli\n      literal: Joseph D Carpinelli\n\n    orcid: https://orcid.org/0000-0001-8655-8125\n    email: joey@loopy.codes\n\ndate: 2024-04-21\ndate-format: long\nbibliography: references.bib\n---\n\n:::{#aa1cc7ad .cell .markdown}\n## Summary {#sec-summary}\n\nStudents and professionals in astronomy, astrodynamics, astrophysics, and other \nrelated fields often download and parse solar system ephemeris data from two \nmajor providers: \n[Generic JPL SPICE Kernels](https://naif.jpl.nasa.gov/pub/naif/generic_kernels/),\nand [JPL Horizons](https://ssd.jpl.nasa.gov/horizons/). SPICE Kernels are \ntypically read through the SPICE Toolkit, which is available in a variety of \nprogramming languages, include the C Programming Language with `CSPICE` [@cspice]. \nThe Julia packages [`CSPICE_jll.jl`](https://github.com/JuliaBinaryWrappers/CSPICE_jll.jl) \nand [`SPICE.jl`](https://github.com/JuliaAstro/SPICE.jl) expose many `CSPICE` \nfunctions through Julia functions. Julia users can load and interact with SPICE \nkernels `SPICE.furnsh` and `SPICE.spkez`. Horizons data is available through\na variety of methods, including email, command-line, graphical web interfaces,\nand a [REST API](https://ssd-api.jpl.nasa.gov/doc/horizons.html) [@horizons].\n\nThis paper introduces several packages which allow users to download and process \nephemeris data idomatically, all from within Julia: `SPICEApplications.jl`, \n`SPICEKernels.jl`, `SPICEBodies.jl`, `HorizonsAPI.jl` and `HorizonsEphemeris.jl. \nThrough the use of these packages, users can share replicatable code which \nautomatically fetches publicly available ephemeris data, as opposed to manually \nincluding ephemeris data files with their source code distribution. \n\n## Statement of Need {#sec-need}\n\nWhile ephemeris users have all of the tools they need to fetch and parse ephemeris\ndata within Julia, they do not have the tools to do so _simply_ or \n_idiomatically_. [@sec-need-horizons] and [@sec-need-spice] present the research \nneeds filled by each of the five packages introduced in this paper. \n\n### JPL HORIZONS {#sec-need-horizons}\n\nThe two HORIZONS-related packages presented in this paper --- \n[`HorizonsAPI.jl`](https://github.com/cadojo/HorizonsAPI.jl)\nand [`HorizonsEphemeris.jl`](https://github.com/cadojo/HorizonsEphemeris.jl) ---\nare respectively the first Julia packages to precisely match the REST API with\ntab-completion through static keyword arguments, and the first to offer \nautomatic response parsing into `NamedTuple` types. The `NamedTuple` output of \n`HorizonsEphemeris.ephemeris`, the top-level method for fetching Cartesian state \nvectors from the HORIZONS platform, allows for easy plotting, file-saving, and \n`DataFrame` construction. Both `HorizonsAPI.jl` and `HorizonsEphemeris.jl` offer\nusers a simple, repeatable way to query and parse HORIZONS ephemeris data. \n\n### JPL SPICE {#sec-need-spice}\n\nThe three SPICE-related packages presented in this paper ---\n[`SPICEApplications.jl`](https://github.com/cadojo/SPICEApplications.jl),\n[`SPICEKernels.jl`](https://github.com/cadojo/SPICEKernels.jl), and \n[`SPICEBodies.jl`](https://github.com/cadojo/SPICEBodies.jl) --- provide \nidiomatic kernel fetching, inspection, and caching from within Julia. \nWhile SPICE Toolkit executables were _bundled_ in Julia through \n[`CSPICE_jll`](https://github.com/JuliaBinaryWrappers/CSPICE_jll.jl), they have \nnot been previously _exposed_ through Julia functions. `SPICEApplications.jl`\nwraps each executable with a Julia function, allowing users to easily call \nSPICE Toolkit executables within their Julia programs, just as they can with \n`CSPICE` routines wrapped in [`SPICE.jl`](https://github.com/JuliaAstro/SPICE.jl).\n\nJulia users interact with SPICE kernels by downloading publicly-available\na[Generic Kernels](https://naif.jpl.nasa.gov/pub/naif/generic_kernels/), and \nparsing the data using `SPICE.jl`, or another ephemeris parsing source. This \nworkflow requires that users know how to find the correct generic kernels for \ntheir chosen application, and that they know how to use CSPICE functions to \nretrieve their desired data. `SPICEKernels.jl` and `SPICEBodies.jl` offer \nidiomatic interfaces to ephemeris fetching and parsing parsing respectively. \nContinuous integration in the \n[`SPICEKernels.jl` repository](https://github.com/cadojo/SPICEKernels.jl) \nmultiple times daily, and automatically exports all available generic kernels \nas variables in Julia. SPICE Toolkit executables (provided by \n`SPICEApplications.jl`) are used to retrieve a description of each kernel's\ncontents, and place that description in the Julia variable's docstring. As a \nresult, users can use tab-completion and Julia's built-in documentation tools\nto inspect kernel contents, and download the correct kernel for their \napplication. Once each kernel is downloaded and loaded into the SPICE kernel pool\nwith `SPICE.jl`, users can use `SPICEBodies.jl` to idiomatically fetch data at \na provided instance in time. \n\n## Usage {#sec-usage}\n\nFor detailed usage examples, consult the common \n[documentation site](https://ephemeris.loopy.codes) for all of the packages \npresented in this paper. The code examples below show how a user may retrieve \ndata from the HORIZONS platform, inspect a SPICE kernel before downloading it, \nand retrieve Cartesian state data at an instance in time. \n:::\n\n::: {.cell execution_count=1}\n``` {#lst-horizons-fetching .julia .cell-code lst-cap=\"Querying JPL HORIZONS in Julia\"}\nusing Dates, DataFrames\nusing HorizonsEphemeris\n\nephemeris(\"earth\", now()) |> DataFrame\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=8}\n\\begin{tabular}{r|ccccccc}\n\t& t & cal & x & y & z & ẋ & \\\\\n\t\\hline\n\t& Float64 & String31 & Float64 & Float64 & Float64 & Float64 & \\\\\n\t\\hline\n\t1 & 2.46042e6 &  A.D. 2024-Apr-21 18:33:01.4100 & -0.861562 & -0.489421 & -0.211931 & 0.00879181 & $\\dots$ \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {#lst-spice-inspection .julia .cell-code lst-cap=\"Inspecting Generic SPICE Kernels in Julia\"}\nusing SPICEApplications, SPICEKernels\n\nbrief(de440s()); # alternatively, check the kernel variable's docstring: @doc(de440s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \nBRIEF -- Version 4.1.0, September 17, 2021 -- Toolkit Version N0067\n \n \nSummary for: /Users/joey/.julia/scratchspaces/8e9d28ce-e483-4ef7-bfd9-45b8fef6369c/kernels/de440s.bsp\n \nBodies: MERCURY BARYCENTER (1)  SATURN BARYCENTER (6)   MERCURY (199)\n        VENUS BARYCENTER (2)    URANUS BARYCENTER (7)   VENUS (299)\n        EARTH BARYCENTER (3)    NEPTUNE BARYCENTER (8)  MOON (301)\n        MARS BARYCENTER (4)     PLUTO BARYCENTER (9)    EARTH (399)\n        JUPITER BARYCENTER (5)  SUN (10)\n        Start of Interval (ET)              End of Interval (ET)\n        -----------------------------       -----------------------------\n        1849 DEC 26 00:00:00.000            2150 JAN 22 00:00:00.000\n \n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {#lst-spice-fetching .julia .cell-code lst-cap=\"Using SPICE Kernels in Julia\"}\nusing Dates, SPICE\nusing SPICEKernels, SPICEBodies\n\nreturn furnsh(\n    de432s(),                   # position and velocity data for nearby planets\n    latest_leapseconds_lsk(),   # timekeeping, parsing epochs\n    gm_de440(),                 # mass parameters for major solar system bodies\n    pck00011(),                 # physical properties of major solar system bodies\n)\n\nearth = KernelBody(\"earth\")\nx, y, z, ẋ, ẏ, ż = earth(now())\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n6-element Vector{Float64}:\n  -1.2888768484408668e8\n  -7.321633170779763e7\n  -3.170436290040343e7\n  15.222650301059293\n -23.330385969097538\n -10.112466505499116\n```\n:::\n:::\n\n\n:::{#ce33bfdf .cell .markdown}\n## External Packages\n\nThe packages presented in this paper which interact with the SPICE Toolkit \nrequire users to use [`SPICE.jl`](https://github.com/JuliaAstro/SPICe.jl),\nor another SPICE-compatible kernel loading tool. Support for other SPICE\nkernel management packages, such as \n[`Ephemerides.jl`](https://github.com/JuliaSpaceMissionDesign/Ephemerides.jl),\nmay be added in the future. \n\nIn addition to the packages in this paper which interface with the JPL HORIZONS\nephemeris platform, the [`HORIZONS.JL`](https://github.com/PerezHz/HORIZONS.jl)\npackage offers simplified interfaces for constructing and sending queries to the\nJPL HORIZONS REST API. \n\n## References {#sec-ref}\n:::{#refs}\n:::\n:::\n\n",
    "supporting": [
      "index_files/figure-markdown"
    ],
    "filters": []
  }
}